[["index.html", "个人问题集 前言", " 个人问题集 曹洋 2020-11-05 前言 生活和工作中我们会不断遇到新的问题，继而不断寻找解决问题的方法，可以去百度或者谷歌搜索，可以去问技术大拿。相信很多人跟我一样，在下次碰到同样的问题的时候，还是有可能不知道怎么解决，可能还要走以前的老路子。好记性不如烂笔头，把自己碰到的问题记录在这里，以备需要时查看。 问题无关简单或者困难，有用即可。 "],["r-programming.html", "第1章 R 语言 1.1 安装和配置 1.2 R 包开发 1.3 Rstudio 1.4 R 基础 1.5 tidyverse 数据分析 1.6 可视化 1.7 可重复性研究", " 第1章 R 语言 1.1 安装和配置 1.1.1 安装 ubuntu 安裝 R 参考https://cran.r-project.org/bin/linux/ubuntu/README.html # 添加源 以 16.04 xenial 为例，根据自己的ubuntu版本添加相应源 deb https://cloud.r-project.org/bin/linux/ubuntu xenial-cran35/ # 密匙 sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 sudo apt-get update sudo apt-get install r-base r-base-dev CentOS 安装 R yum install epel-release yum install R-core R-core-devel 1.1.2 配置 设置cran和bioconductor国内源 可以在用户主目录下新建.Rprofile文件，添加: # cran mirror options(repos = c(CRAN = &quot;https://mirrors.tuna.tsinghua.edu.cn/CRAN/&quot;)) # bioconductor mirror options(BioC_mirror = &quot;http://mirrors.ustc.edu.cn/bioc/&quot;) 1.1.3 安装包 centos 7 安装 hdf5r 见这 cenos 7 安装 stringr stringr 依赖 stringi, stringi 要求 ICU4C &gt;= 55, 而centos 7 中 icu版本为50.2。我们可以从 stringi 的 github 仓库下载源代码，里面包含ICU安装 包，直接安装即可。 wget https://github.com/gagolews/stringi/archive/v1.4.6.tar.gz - O stringi-1.4.6.tar.gz install.packages(&quot;stringi-1.4.6.tar.gz&quot;) install.packages(&quot;stringr&quot;) install_github()安装包的时候出现错误Error in file.copy(file.path(R.home(\"doc\"), \"html\", \"R.css\"), outman), 系统是centos 因为安装 R 的时候缺少file.path(R.home(\"doc\"), \"html\", \"R.css\")，需要手动创建, 参考这 if (!file.exists(x)) { dir.create(x, recursive=TRUE) file.copy(system.file(&quot;html/R.css&quot;, package=&quot;stats&quot;), x) } 1.2 R 包开发 1. github中添加包的 code coverage 使用usethis::use_coverage(), 添加test coverage， 运行后会创建文件codecov.yml控制台会显示类似下面markerdown文本，粘贴至 README文件添加badage [![Codecov test coverage](https://codecov.io/gh/yiluheihei/rlatexmath/branch/master/graph/badge.svg)](https://codecov.io/gh/yiluheihei/rlatexmath?branch=master) 用github账号登录codecov.io, 添加该仓库至codecov赋予其权限， 然后会弹出一个token (如下图所示) 利用covr::codecov检测包的test coverage并上传至codecov covr::codecov(token = &quot;YOUR_TOKEN_GOES_HERE&quot;) 2. 包中 README.md 中用到的图片存放位置 因为 cran 中生成 readme 只允许放在少数文件夹下，如man/figures/ pkgdown 跟 cran 保持一致。所以 README.md 中图片建议存放在man/figures/， 如果是由 Rmd 文件生成，设置 knitr 图片保存路径 knitr::opts_chunk(fig.path = \"man/figures/\") 3. 写 unit test 的时候如果需要读取用save()或者saveRDS()保存外部数据，出现warning Added dependency on R &gt;= 3.5.0 because serialized objects in serialize/load version 3 cannot be read in older versions of R 这是因为 R 在 3.5.0 版本后修改了这两个函数的参数version默认为3, 保存数据的时候设置参数version = 2即可。 1.3 Rstudio rstudio git 选择所有文件add并commit 在commit界面，ctrl/command + A全选,然后回车即可，参考这里 ubuntu rstudio不支持中文 这是因为 rstudio 自带的QT5不支持 fctix (搜狗拼音就是依赖fctix)，设置 rstuido 使用系统自带的QT即可，步骤如下 # 1.系统自带 qt 的 fctix 插件链接到 rstudio 相应文件夹下 sudo ln -s /usr/lib/$(dpkg-architecture -qDEB_BUILD_MULTIARCH)/qt5/plugins/platforminputcontexts/libfcitxplatforminputcontextplugin.so /usr/lib/rstudio/plugins/platforminputcontexts/ 重启 Rstudio 即可 1.3.1 snippet 在编写脚本的时候，在脚本开始写上该脚本的信息（如作者，时间，脚本说明） snippet header_script ################################################################################ ## Description: ## Author: ## Create Time: Thu Nov 5 09:20:00 2020 ## Updated Time: ################################################################################ 脚本的分段注释, 描述该段代码的作用 snippet header_section ################################################################################ ################################################################################ 1.3.2 Rstudio 常用快捷键 1.3.2.1 Navigating code (代码导航) 1.3.2.1.1 跳转到project中的文件/函数(定义) ctrl + ., 在弹出框中输入文件名或者函数名, 也可以在工具栏的Go to File/Function 搜索框中输入要搜索的文件名或者函数名 F2 按住ctrl, 点击左键 1.4 R 基础 根据序列长度进行迭代（循环）的时候，1:seq_along(y)和1:length(y)有什么区别？ 应使用1:seq_along(y)。当length(y) = 0时seq_along(y)返回integer(0)，基于1:seq_along(y)的循环会抛错； 而1:length(y)表示1:0的迭代，可能出现意想不到的结果。参见R for Data Science (Grolemund and Wickham 2019) You might not have seen seq_along() before. It’s a safe version of the familiar 1:length(l), with an important difference: if you have a zero-length vector, seq_along() does the right thing y &lt;- vector(&quot;double&quot;, 0) # 抛错 seq_along(y) ## integer(0) sapply(1:seq_along(y), function(x) x + 1) ## Error in 1:seq_along(y): argument of length 0 # 正常计算 1:length(y) ## [1] 1 0 sapply(1:length(y), function(x) x + 1) ## [1] 2 1 如果我们在~/.Rprofile添加了初始化设置，那么如果当前工作目录中有含有.Rprofile的时候（如在github上fork的别人的项目中含有该文件），就会忽略~/.Rprofile中的设置。 解决方法# ~/.Renviron中设置site profile变量R_PROFILE=~/Rprofile.site，然后把之前.Rprofile的设置拷贝到~/Rprofile.site即可。这是因为R的启动的时候会在读取.Rprofile之前读取~/Rprofile.site中的设置。 设置Alfred快捷打开rstudio的project Preferences &gt; Features &gt; Default Results &gt; Advanced，然后把任何.Rproj文件拖入窗口，参考于此 安装rlang的时候出现错误复制 C:\\R-3.6.0\\library\\00LOCK-rlang\\00new\\rlang\\libs\\x64\\rlang.dll到 C:\\R-3.6.0\\library\\rlang\\libs\\x64\\rlang.dll 时出了问题：Permission denied 因为如果R包如果包含c++/c/Fortran代码（如rlang），如果已经加载了这种包，在对其进行升级或者重装 的时候就会出现类似上述错误。关掉加载这些包的R，才能继续重装或升级。 1.5 tidyverse 数据分析 data.frame 转置(transpose) tidyverse 中 默认操作数据结构为 tibble, 用于替代 R 中data.frame，tibble 默认没有行名。下面对用t()和 tidyr 方法转置作比较： 用t()函数 # 有行名的数据 df &lt;- data.frame(a = 1:3, b = 4:6) row.names(df) &lt;- paste0(&quot;r&quot;, 1:3) # as.data.frame(), 保持行名和列名 t(df) %&gt;% as.data.frame() ## r1 r2 r3 ## a 1 2 3 ## b 4 5 6 # as_tibble, 默认删除行名 t(df) %&gt;% tibble::as_tibble() ## # A tibble: 2 x 3 ## r1 r2 r3 ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 1 2 3 ## 2 4 5 6 # 可以用`rowname = NA`保持行名, 左上角有个`*`表示这个tibble有行名 t(df) %&gt;% tibble::as_tibble(rownames = NA) ## # A tibble: 2 x 3 ## r1 r2 r3 ## * &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 1 2 3 ## 2 4 5 6 用 tidyr 中函数 # 保持行名和列名, column_to_rownames用于设置行名，返回data.frame tibble::rownames_to_column(df) %&gt;% tidyr::pivot_longer(-rowname) %&gt;% tidyr::pivot_wider(names_from = &quot;rowname&quot;, values_from = &quot;value&quot;) %&gt;% tibble::column_to_rownames(&quot;name&quot;) ## r1 r2 r3 ## a 1 2 3 ## b 4 5 6 此外还可以使用 purrr::transpose # 行名列名都丢失，transpose 去除了原有行名 purrr::transpose(df) %&gt;% purrr::map(unlist) %&gt;% dplyr::bind_cols() ## New names: ## * NA -&gt; ...1 ## * NA -&gt; ...2 ## * NA -&gt; ...3 ## # A tibble: 2 x 3 ## ...1 ...2 ...3 ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 1 2 3 ## 2 4 5 6 1.6 可视化 1.6.1 基础图形 par(\"pin\"), par(\"usr\") par(\"pin\")表示当前图形的尺寸用英寸表示(width * height)；par(\"usr\")表示当前图形的坐标范围c(xmin, xmax, ymin, ymax) 颜色代码的可视化，以便观察颜色 image(1, 1, as.matrix(1), col = \"#E64B35\") scales::show_col(\"#E64B35\") 1.6.2 ggplot 什么是individal geom 和 collective geom? 基于一行数据进行作图的geom称为individal geom，如geom_point每行数据映射到图形中的一个点；基于多行数据作图的geom称为collective geom, 如geom_bar对多行数据进行统计变换计算其频数，也就是说多行数据映射到图形中的一个bar. 如何正确使用 ggplot aes(group) 见这篇博客 修改连续坐标轴的范围 见这篇博客 坐标轴label移动到图形内部 见此 修改离散坐标的顺序 见这篇博文 添加文本标注 使用Inf或-Inf表征在边界添加文本 # 例子源自https://r4ds.had.co.nz/graphics-for-communication.html library(ggplot2) label &lt;- tibble::tibble( displ = Inf, hwy = Inf, label = &quot;Increasing engine size is \\nrelated to decreasing fuel economy.&quot; ) ggplot(mpg, aes(displ, hwy)) + geom_point() + geom_text(aes(label = label), data = label, vjust = &quot;top&quot;, hjust = &quot;right&quot;) 图形添加边框 设置theme(plot.background = element_rect()) ggplot(mtcars, aes(wt, mpg)) + geom_point() + theme(plot.background = element_rect(color = &quot;black&quot;)) 等高线图geom_contour()自定义levels 手动指定参数breaks(帮助文档中找不到该参数说明)，参考此. ggplot中文字体 见此 ggplot分面添加tag (如A,B, C)，可参考此问题 p &lt;- ggplot(mpg, aes(displ, hwy)) + geom_point() + facet_wrap(vars(class)) egg::tag_facet_outside(p) ## 字符 {#char} 1.6.3 正则表达式 正则表达式字符列表[]用法：[]中的字符匹配字符本身，如[.]匹配.,而不是任意字符，因此可以使用[.]代替\\\\.,一些在[]内有特殊意义的字符除外，如-表示范围，^不包含这些字符，]结束括号，\\在字符串中表示转义。 正则表达式默认是进行贪婪匹配，即匹配最长字符串，在正则表达式后边加?表示最短匹配 # 匹配到两个a，然后删除 sub(&quot;a+&quot;, &quot;&quot;, &quot;aac&quot;) ## [1] &quot;c&quot; # 匹配到一个a，然后删除 sub(&quot;a+?&quot;, &quot;&quot;, &quot;aac&quot;) ## [1] &quot;ac&quot; 表示重复次数的*(任意次)、?(0或1次)、+(一次以上)优先级较高 # b出现一次以上 sub(&quot;ab+&quot;, &quot;&quot;, &quot;ababc&quot;) ## [1] &quot;abc&quot; # ab出现一次以上 sub(&quot;(ab)+&quot;, &quot;&quot;, &quot;ababc&quot;) ## [1] &quot;c&quot; 1.7 可重复性研究 1.7.1 Rmarkdown - Knitr Rmarkdown 输出 pdf 支持中文 使用rticles包, 在 yaml 头文件中指定 输出格式为rticles::ctex. 参考这里 documentclass: ctexart output: rticles::ctex knitr多个代码块的输出折叠到一个pre块中 collapse = TRUE 输出为github的markdown格式 github_document产生github的markdown格式，比如README.Rmd生成README.MD knitr 数据较大时设置缓存 cache =TRUE，对于较大数据可能会抛出错误；这时候设置cache.lazy = FALSE即可，答案在这和这 代码块中的输出多个图形，怎么输出为一副图形？ figure.show默认为asis图形位于产生图形代码后面，多个作图语句就会产生多幅图形，figure.show='hold'就代码块结尾显示所有图形，即一个代码块产生一个图形。 1.7.2 bookdown 章节去除编号 章节后面添加 {-} 汉话：章节标题汉化，https://bookdown.org/yihui/bookdown/internationalization.html。配置文件`_bookdown.yml` language: ui: chapter_name: [&quot;第&quot;, &quot;章&quot;] The chapter_name field can be either a character string to be prepended to chapter numbers in chapter titles (e.g., ‘CHAPTER’), or an R function that takes the chapter number as the input and returns a string as the new chapter number (e.g., !expr function(i) paste('Chapter', i)). If it is a character vector of length 2, the chapter title prefix will be paste0(chapter_name[1], i, chapter_name[2]), where i is the chapter number. 出现错误Error in split_chapters(output, gitbook_page, number_sections, split_by, :Automatically generated filenames contain duplicated ones: -, - 表示由split_by自动生成章节标题出现重复标题而出现错误。中文标题会出现这种错误，章节标题手动添加{$ID}即可，参见这和这 1.7.3 tinytex pkgdown编译jss文档的时候出现，! LaTeX Error: Fileae.sty’not found.` 说明缺少ae包， tlmgr_search(&#39;ae.sty&#39;) # 提示remote repository 版本太旧，2018 &lt; 2019,这时候需要升级texlive tinytex::reinstall_tinytex() tlmgr_search(&#39;ae.sty&#39;) # ae: # texmf-dist/tex/latex/ae/ae.sty #安装即可 tlmgr_install(&#39;ae&#39;) References "],["python.html", "第2章 python", " 第2章 python linux 修改 pip 源 新建~/.pip/pip.conf添加源 # 以清华源为例 [global] timeout = 300 index-url = https://pypi.tuna.tsinghua.edu.cn/simple [install] trusted-host = tsinghua.edu.cn "],["bioinfo.html", "第3章 生物信息 3.1 微生物组 3.2 scRNA-seq", " 第3章 生物信息 3.1 微生物组 mac如何安装 lefse ？ 通过homebrew安装lefse已经不再维护brew install biobakery/biobakery/lefse;采用conda安装(目前biobakery下的软件都用conda源安装) conda config --add channels biobakery conda install -c biobakery lefse 本地测试qiime1脚本时，安装完依赖后，运行脚本，pycharm 导入matplotlib.pyplot出现错误from urllib.parse import urlencode ImportError: No module named parse pycharm中设置 Preferences -&gt; Tools -&gt; Python Scientific取消勾选Show plots in tool window，答案见此 3.2 scRNA-seq 安装velocyto.R. clang: error: unsupported option '-fopenmp' mac下clang不支持openmp，解决方法参考此处，安装支持openmp的clang. 然后修改配置文件，在~/.R/Makevars(配置compliers和library)，添加 CC=/usr/local/clang7/bin/clang SHLIB_CXXLD=/usr/local/clang7/bin/clang++ CXX= /usr/local/clang7/bin/clang++ -Wall CXX1X= /usr/local/clang7/bin/clang++ CXX98= /usr/local/clang7/bin/clang++ CXX11= /usr/local/clang7/bin/clang++ CXX14= /usr/local/clang7/bin/clang++ CXX17= /usr/local/clang7/bin/clang++ LDFLAGS=-L/usr/local/clang7/lib library not found for -lboost_filesystem 安装 boost brew install boost library not found for -lgfortran gfortran包含在gcc中，但是电脑中gcc是通过homebrew安装，原始配置文件/Library/Frameworks/R.framework/Resources/etc/Makeconf中并没有更新库的地址，在~/.R/Makevars中手动添加即可 # 通过homebrew安装的gcc地址 FLIBS = -L/usr/local/lib/gcc/8/gcc/x86_64-apple-darwin17.5.0/8.1.0 -L/usr/local/lib/gcc/8 -lgfortran -lquadmath -lm # Library/Frameworks/R.framework/Resources/etc/Makeconf中的原始配置 # FLIBS = -L/usr/local/gfortran/lib/gcc/x86_64-apple-darwin15/6.1.0 -L/usr/local/gfortran/lib -lgfortran -lquadmath -lm 安装velocyto.py mac 在 pip 安装的时候gcc编译出现错误，建议使用conda安装conda install velocyto.py "],["office-app.html", "第4章 办公软件 4.1 PPT 4.2 EXCEL 4.3 PS CC", " 第4章 办公软件 4.1 PPT mac下powerpoint从自动保存文件中恢复文件 以防在某些特殊情况下（如电脑死机）的时候，丢失没有保存的内容，通过菜单栏powerpoint -&gt; 偏好设置 -&gt; 保存 -&gt; 勾选保存自动恢复信息，选择保存间隔（如5分钟)，这样就会在每隔一定 时间后对文件进行保存。默认情况下，当我们再打开ppt的时候会弹出恢复文件选项，选择最近时间的文件进行恢 即可得到修改后的文件。 但是，有时候不会自动弹出恢复选项。这时候我们到自动保存文件夹位置为/Users/(username)/Library/Containers/com.Microsoft.Powerpoint/Data/Library/Preferences/AutoRecovery下根据保存时间找到自动保存的文件，把文件扩展名改成.ppt恢复对未保存的修改。 4.2 EXCEL 拖动公式时某个数值保持不变，A1/B1在向下拖动时变为A2/B2，如何保持A1不变 $表示绝对引用，可设置公式参数不变，如$A$1/B1中保持$A$1不变。 4.3 PS CC 无法使用修补工具，因为它不用于索引颜色图像 需转换为RGB图像，点击菜单栏“图像 -&gt; 模式 -&gt; RGB” 去除图片中文字 使用修补工具，具体步骤:选择修补工具，公共栏中选择修补项为源，关闭透明选项，然后用修补工具框选文字，拖动到无文字区域中与文字周围图案相似的位置，修补工具就会自动匹配目标位置的颜色。 "],["mac-os.html", "第5章 Mac OS 5.1 homebrew 5.2 应用程序", " 第5章 Mac OS 5.1 homebrew homebrew 安装程序出现以下错误 Error: An unexpected error occurred during the `brew link` step The formula built, but is not symlinked into /usr/local Permission denied @ dir_s_mkdir - /usr/local/Frameworks Error: Permission denied @ dir_s_mkdir - /usr/local/Frameworks 是由于用户没有修改$(brew --prefix)/*即/usr/local权限，修改权限即可sudo chown -R $(whoami) $(brew --prefix)/* 5.2 应用程序 打开xxx.app文件时，出现app已损坏，打不开，你应该将它移到废纸篓 系统默认不允许用户自行下载安装应用程序。在终端运行sudo sptcl --master-disable运行即可。打开系统偏好设置 -&gt; 安全性与隐私 -&gt; 允许从以下位置下载的应用就变成了任何来源，双击即可打开app。 5.2.1 Alfred Mac效率神器，快速搜索并打开app、文件，可替代spotlight 设置激活快捷键cmd + space 需取消splotlight快捷键，然后在设置面板里设置即可，详见此 搜索不到文件 可能是mac系统索引问题，设置面板选择建立mac os的源文件“Rebuild macOS Metadata”，见此 "],["linux.html", "第6章 linux 6.1 安装和配置", " 第6章 linux 6.1 安装和配置 TP-P53 安装 ubuntu 18.04 参考这里 bios 关闭 Secure Boot, startup 选择 Both (UEFI/legacy), 以从 usb 安装系统 安装 Install Ubuntu， 按 e 配置安装选项，以 set开始的行修改： gfxpayload=××text××； 下面一行添加=casper only-ubiquity ××nomodeset××，不安装nouveau驱动，因为机 器带了nvidia T2000独显，后续要安装对应显卡驱动 安装系统 重启,ctrl + alt + F1进入命令行安装驱动，因为我们选择了nomodeset安装， 没有显卡驱动进入图形界面会卡死。sudo ubuntu-drivers autoinstall，重启即可 检查显卡驱动是否安装成功 # 看到configuration那里driver=nvidia表示显卡驱动安装成功，如果不采用nomodeset # 选项安装，默认安装nouveau驱动 sudo lshw -C display # *-display # description: VGA compatible controller # product: NVIDIA Corporation # vendor: NVIDIA Corporation # physical id: 0 # bus info: pci@0000:01:00.0 # version: a1 # width: 64 bits # clock: 33MHz # capabilities: pm msi pciexpress vga_controller bus_master cap_list rom # configuration: driver=nvidia latency=0 ubuntu 修复模式下修改文件 有时候在修改完某个文件后，重启系统会卡在 ubuntu 启动的log界面，比如通过修改 rc.local设置开机启动项，这时候就需要在recovery模式下修改引起启动问题的文件： 开机后按shift或者esc进入grub，选额高级启动项 进入recovery mode 选则进入Drop To Root Shell Prompt，就用 root 用户登录了，然后修改文件即可 ubuntu 添加 aliyun 源 根据这里选择相应版本的源，以 16.04 xenial为例 # 备份原有文件 mv /etc/apt/sources.list /etc/apt/sources.list.backup # 新建文件，添加源 touch /etc/apt/sources.list deb-src http://archive.ubuntu.com/ubuntu xenial main restricted # Added by software-properties deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe # Added by software-properties deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe # Added by software-properties deb http://mirrors.aliyun.com/ubuntu/ xenial universe deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe deb http://mirrors.aliyun.com/ubuntu/ xenial multiverse deb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiverse deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse # Added by software-properties deb http://archive.canonical.com/ubuntu xenial partner deb-src http://archive.canonical.com/ubuntu xenial partner deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe # Added by software-properties deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe deb http://mirr.iyun.com/ubuntu/ xenial-security multiverse ubuntu 18.04 设置开机启动脚本 方法参考这里 ubutu 18.04采用 systemd 进行系统管理，启动的时候 systemd 默认读取 /etc/systemd/system下的配置文件，这些配置文件会链接/lib/systemd/system下的 文件。 ls /lib/systemd/system下可以看到有rc-local.service和rc.local.service文 件,其中rc.local.servce是链接到rc-local.service。打开rc-local.service # SPDX-License-Identifier: LGPL-2.1+ # # This file is part of systemd. # # systemd is free software; you can redistribute it and/or modify it # under the terms of the GNU Lesser General Public License as published by # the Free Software Foundation; either version 2.1 of the License, or # (at your option) any later version. # This unit gets pulled automatically into multi-user.target by # systemd-rc-local-generator if /etc/rc.local is executable. [Unit] Description=/etc/rc.local Compatibility ConditionFileIsExecutable=/etc/rc.local After=network.target [Service] Type=forking ExecStart=/etc/rc.local start TimeoutSec=0 RemainAfterExit=yes GuessMainPID=on 该启动文件少了INSTALL字段，在rc-local.service后面添加 [INSTALL] WantedBy=multi-user.target Alias=rc-local.service 接着新建/etc/rc.local文件，在里面添加启动脚本 !bin/sh -e # 如添加xx-net的启动脚本 /&lt;path_to_xx-net&gt;/xx_net.sh 加上x执行权限 sudo chmod +x /etc/rc.load 最后把rc-local.service链接到/etc/systemd/system/下 sudo ln -s /lib/systemd/system/rc-local.service /etc/systemd/system/ 重启/etc/rc.local内的脚本就会在开机后自动启动。 ubuntu workspace 呈 grid 形式显示 ubuntu 默认的 workspace 只能上下显示，安装 gnome-shell-wsmatrix 使 workspace 以行列显示。 下载 gnome-shell-wsmatrix 解压后拷贝到 ~/.local/share/gnome-shell/extensions/ 下 保证 metadata.json 文件的uuid字段与加压后的文件夹同名，如 wsmatrix@martin.zurowietz.de alt + f2 输入命 r 重启 ××gnome shell××即可 ubuntu 触控板手势设置 安装 fusuma 添加用户至 INPUT 用户组后重启 sudo gpasswd -a `$USER` input 安装 sudo apt-get install libinput-tools sudo gem install fusuma sudo apt-get install xdotool 添加至开机自动启动: 打开 gnome-session-properties 添加 fusuma (which fusuma)的路径, 路径后面加上参数 -d 表明后台运行 最后可以在~/.config/fusuma/config.yml下自定义配置 ubuntu 搜狗输入法乱码 搜狗输入法需要切换两次才能正确显示，第一次切换拼音显示为乱码 解决办法参考这里 输入法配置，不要把搜狗输入法放在第一位 依赖性检查sudo apt-get install -f 删除配置文件后重启 cd ~/.config rm -rf SogouPY* sogou* fcitx -r ubuntu 开机后弹窗 检测系统程序出现问题 修改/etc/default/apport, enable=0 centos 7 升级内核, 一些软件或者驱动（如网卡驱动）需要高版本内核 参考这里 # 添加elrepo源，elrepo包含了许多硬件相关的软件包的rpm软件仓库 # 首先倒入public key rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org # 参考http://elrepo.org/tiki/tiki-index.php选择对应系统版本的源 rpm -Uvh https://www.elrepo.org/elrepo-release-7.0-4.el7.elrepo.noarch.rpm # 查看可升级的内核 yum --disablerepo=&quot;*&quot; --enablerepo=&quot;elrepo-kernel&quot; list available # 安装最新内核 yum --enablerepo=elrepo-kernel install kernel-ml # 更新内核 grub2-mkconfig -o /boot/grub2/grub.cfg # 查看系统中的内核 cat /boot/grub2/grub.cfg |grep menuentry if [ x&quot;${feature_menuentry_id}&quot; = xy ]; then menuentry_id_option=&quot;--id&quot; menuentry_id_option=&quot;&quot; export menuentry_id_option menuentry &#39;CentOS Linux (5.5.5-1.el7.elrepo.x86_64) 7 (Core)&#39; --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option &#39;gnulinux-5.5.5-1.el7.elrepo.x86_64-advanced-a2c5cb57-ab41-44c2-b7f8-e3981fc2582d&#39; { menuentry &#39;CentOS Linux (3.10.0-1062.el7.x86_64) 7 (Core)&#39; --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option &#39;gnulinux-3.10.0-1062.el7.x86_64-advanced-a2c5cb57-ab41-44c2-b7f8-e3981fc2582d&#39; # 然后根据上一步查看到的内核CentOS Linux (5.5.5-1.el7.elrepo.x86_64) 7 (Core)设置 grub2-set-default &quot;CentOS Linux (5.5.5-1.el7.elrepo.x86_64) 7 (Core)&quot; # 重启即可看到新更新的内核 reboot centos 7 安装 Intel Wi-Fi 6 AX200 160MHz无线网卡驱动 [官网](https://www.intel.cn/content/www/cn/zh/support/articles/000005511/network-and-i-o/wireless-networking.html 上说该网卡要求内核在5.1以上,在升级完内核后，下载 驱动，然后按照README中的步骤安装即可 cp iwlwifi-cc-a0-46.ucode /lib/firmware "],["tools.html", "第7章 tools 7.1 git 和 github 7.2 hugo 7.3 docker 7.4 conda", " 第7章 tools 7.1 git 和 github push到github的时候每次都需要输入用户名密码 首先，克隆到本地的时候选择ssh方式 git clone git@github.com:&lt;repo&gt; ## 如果本地已经选择https方式克隆，可以先删除原来的远程仓库，重新添加 ## ssh方式 # 查看本地clone方式 git remote -v # 删除远程仓库 git remote rm origin # 重新添加 git remote add origin git@github.com:&lt;repo&gt; 然后本地生成ssh密匙添加至github账户，获得访问github权限,详细步骤参考 这里 # 一路回车，在~/.ssh文件夹下生成了id_rsa文件 ssh-keygen -t rsa -C &quot;&lt;github账户邮箱&quot; # 拷贝~/.ssh/id_rsa.pub到github账户进行设置 最后push即可 git push --set-upstream origin master 修改commit的message # 想要修改的commit的父提交hash值 git rebase -i &lt;commit_hash&gt; # 修改要修改message行首的pick为r(reword)，然后修改该条message，保存退出即可 # 如果同时修改github仓库的commit，强制push即可 git push -f 显示某一次提交中某个文件的变化 git log &lt;commit_hash&gt; &lt;file_name&gt; 删除远程仓库(如github)的错误提交，在本地处理好之后，如删除错误提交，然后强制push到远程进行修改 git push --force 删除远程分支 git push origin --delete &lt;remote_branch&gt; 修改本地仓库关联的远程仓库，提交修改至另一个远程仓库 git remote set-url origin https://github.com/yiluheihei/beginr.git 删除本地 untracted files # 查看哪些文件将被删除 git clean -n # 删除文件 git clean -f # 删除文件和文件夹 git clean -f -d # 删除 ignore 的文件 git clean -f -X # 删除 ignore 和非 ignore 文件 git clean -f -x unstage git add的文件 git reset HEAD &lt;file&gt; 忽略本地文件修改 # 若文件状态为unstage git checkout &lt;file&gt; # 若文件已经通过`git add` stage，首先文件状态修改为unstage git reset HEAD &lt;file&gt; git checkout &lt;file&gt; 拉取远程分支时保持本地修改 # 备份当前工作区内容，从最近一次提交中读取内容 git stash # 拉取远程分支内容 git pull &lt;remote branch&gt; # 从stash中读取备份的内容 git stash pop 远程仓库已经有新的commit，在本地开发的时候没有pull到本地，就直接进行修改并 commit，这时候再push到远程仓库就会提示远程仓库中有本地不存在的commit。这时候就 需要在远程仓库基础上merge本地的最新commit # 首先抓取远程仓库数据 git fetch # 然后在本地分支内，在origin仓库的基础上变基提交，如果没有冲突，则直接基于远程 # 仓库合并了本地提交。如果有冲突，则解决冲突后合并 git rebase origin/master 删除已经提交的文件，并添加到ignore # 从版本控制中的index中删除该文件 git rm -r --cached &lt;file&gt; # 该文件添加至ignore，然后commit git commit 查看仓库中代码行数 参考这里 git ls-files | xargs wc -l # R 代码行数 git ls-files | grep &#39;.R$&#39; | xargs wc -l windows下命令行git中文显示乱码 设置环境变量LESSCHARSET=utf-8 7.2 hugo 基于hugo采用blogdown建站的时候出现错误panic: BUG: Expected valid escape code after \\, but got '\\r'. 是由于配置文件config.toml中采用多行字符中\"\"\"的换行符引起的\\,去掉换行符即 可,参考这. 7.3 docker 安装(centos) curl -sSL get.docker.com -o get-docker.sh # 可选择合适的源 sh get-docker.sh --mirror Aliyun ## 启动docker sudo systemctl enable docker sudo systemctl start docker ## docker 默认只能root用户才能运行 ## 可以把需要用docker的用户加入docker用户组 sudo usermod -aG dokcer $USER # 以docker 用户组登入 newgrp docker docker 配置国内源 参考这,配置 文件/etc/docker/daemon.json中加入中科大源。 { &quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn/&quot;] } 然后重启docker服务sudo systemctl restart docker。同时也可以添加阿里云源， 方法是注册阿里云开发账户后，访问https://cr.console.aliyun.com/#/accelerator， 点击镜像加速器，就看到加速器地址，添加进去即可。 docker 中运行含图形界面的程序 参考这里 和这里 # 1. 赋予其他用户访问本机x server的权利 xhost local:root # xhost + # 挂载 X11 至docker docker run -v /tmp/.X11-unix:/tmp/.X11-unix -e DISPLAY=unix$DISPLAY &lt;the image&gt; 7.4 conda 设置清华源，参考此 channels: - defaults show_channel_urls: true channel_alias: https://mirrors.tuna.tsinghua.edu.cn/anaconda default_channels: - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2 custom_channels: conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud macOS 10.14 Mojave,conda安装包的时候设计到qt就出现错误，如conda-forge::qt-5.9.7-h93ee506_1'. PermissionError(1, 'Operation not permitted') 解决方法在此 # for base: cd ~/anaconda3/bin ls *.app rm -rf *.app conda update --all --yes # for some_env: cd ~/anaconda3/envs/some_env/bin ls *.app rm -rf *.app conda update -n some_env --all --yes Grolemund, Garrett, and Hadley Wickham. 2019. R for Data Science. https://r4ds.had.co.nz/. "]]
